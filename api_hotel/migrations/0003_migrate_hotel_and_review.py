# Generated by Django 4.1 on 2023-05-04 16:57
import json
import os
from typing import List, Type
from unidecode import unidecode

from django.db import migrations, transaction

from api_hotel.models import Hotel
from api_hotel.models.review import HotelReview
from api_user.models import Profile
from api_user.services import ProfileService
from api_user.statics import RoleData

default_cover_image = "https://ik.imagekit.io/tvlk/apr-asset/dgXfoyh24ryQLRcGq00cIdKHRmotrWLNlvG-TxlcLxGkiDwaUSggleJNPRgIHCX6/hotel/asset/20016842-3078abf5cf90a3ec8b59453f05737775.jpeg?_src=imagekit&tr=c-at_max,h-488,q-40,w-768"


special_city_mapping = {
    "Nha Trang": "Khánh Hoà",
    "Đà Lạt": "Lâm Đồng",
    "Phú Quốc": "Kiên Giang",
    "Phan Rang": "Ninh Thuận",
    "Cam Ranh": "Khánh Hòa",
    "Ho Chi Minh": "Tp. Hồ Chí Minh",
    "Hanoi": "Hà Nội"
}


@transaction.atomic
def initial_hotel_and_review_data(apps, schema_editor):
    hotel_model = apps.get_model("api_hotel", "Hotel")
    city_model = apps.get_model("api_general", "City")
    hotel_review_model = apps.get_model("api_hotel", "HotelReview")

    hotel_data_directory = "craw_data/all_hotel_data"
    failed_file_names: List[str] = []
    current_city_name_mapping = dict(city_model.objects.all().values_list("name", "id"))

    all_files = os.listdir(hotel_data_directory)
    hotel_data_files = list(filter(lambda _file_name: _file_name.endswith(".json"), all_files))
    for _idx, _file_name in enumerate(hotel_data_files):
        with open(f"{hotel_data_directory}/{_file_name}", "r", encoding='utf-8') as file:
            file_data: dict = json.loads(file.read())
            review_contents: List[dict] = file_data.get("content", [])
            hotel_data: dict = file_data.get("hotel", {})
            hotel_name: str = hotel_data.get("name", "")
            hotel_images: List[str] = hotel_data.get("images", [])
            cover_picture: str = hotel_images[0] if hotel_images else default_cover_image
            location_text: str = hotel_data.get("location", "")
            city_id: int = get_city_id_from_text(_file_name, current_city_name_mapping)
            if not city_id:
                print(f"Fail with location text: {location_text}")
                failed_file_names.append(_file_name)
                continue

            random_name = ProfileService.random_name()
            owner = ProfileService.create_dump_user_with_name(random_name, RoleData.PARTNER)

            hotel = hotel_model(
                name=hotel_name,
                cover_picture=cover_picture,
                address=location_text,
                city_id=city_id,
                longitude=hotel_data.get("geo_data", {}).get("longitude", 0),
                latitude=hotel_data.get("geo_data", {}).get("latitude", 0),
                owner_id=owner.id
            )
            hotel.save()
            saving_hotel_reviews(hotel_review_model, hotel, review_contents)

            print(f">>> Done [{_idx}/{len(hotel_data_files)}] with hotel: {hotel_name} and {len(review_contents)} reviews")

    print("Failed file: ", failed_file_names)


def get_city_id_from_text(location_text: str, current_city_name_mapping: dict[str, int]) -> int:
    city_id = 0
    location_text = location_text.replace("_", " ")
    for _city_name, _city_id in current_city_name_mapping.items():
        _decoded_city_name = unidecode(_city_name)
        if _city_name in location_text or _decoded_city_name in location_text:
            city_id = _city_id
            break

    if not city_id:
        correct_city_name: str = ""
        for _special_city_name, _correct_city_name in special_city_mapping.items():
            _decoded_special_city_name = unidecode(_special_city_name)
            if _special_city_name in location_text or _decoded_special_city_name in location_text:
                correct_city_name = _correct_city_name
                break
        if correct_city_name:
            city_id = current_city_name_mapping.get(correct_city_name)

    return city_id


def saving_hotel_reviews(hotel_review_model: Type[HotelReview], hotel: Hotel, review_contents: List[dict]):
    hotel_reviews: List[HotelReview] = []

    for _review in review_contents:
        reviewer_location = _review.get("reviewer_location", "")
        reviewer_name = _review.get("name", "")

        if reviewer_location == "dumpxxx":
            reviewer_location = ""
        reviewer: Profile = ProfileService.create_dump_user_with_name(reviewer_name, RoleData.CUSTOMER, reviewer_location)

        hotel_reviews.append(
            hotel_review_model(
                hotel=hotel,
                title=_review.get("review_title", ""),
                content=_review.get("review_content", ""),
                rate=_review.get("review_rating", 0),
                owner_id=reviewer.id
            )
        )

    hotel_review_model.objects.bulk_create(hotel_reviews)


class Migration(migrations.Migration):

    dependencies = [
        ('api_hotel', '0002_roomtype_remove_hotel_group_size_remove_hotel_price_and_more'),
    ]

    operations = [
        migrations.RunPython(initial_hotel_and_review_data, migrations.RunPython.noop)
    ]
